[{"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/App.js":"1","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/index.js":"2","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/reportWebVitals.js":"3","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/Navigation.js":"4","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/Ranking.js":"5","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/Teams.js":"6","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/Media.js":"7","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/Infos.js":"8","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/Chat.js":"9","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/MapLive.js":"10","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/MyAccount.js":"11","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/News.js":"12","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/Program.js":"13","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/reducers/screenName.reducer.js":"14","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/SignInUp.js":"15","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/reducers/userInfos.reducer.js":"16","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/tools/globalVariables.js":"17","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/CardTeam.js":"18","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/DetailTeam.js":"19","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/tools/functions.js":"20","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/reducers/userFavorites.reducer.js":"21","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/CardNews.js":"22","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/DetailNews.js":"23","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/DetailProgram.js":"24","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/reducers/chatHistory.reducer.js":"25","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/ModalMapLive.js":"26","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/ModalModifyAccount.js":"27"},{"size":1711,"mtime":1609884852797,"results":"28","hashOfConfig":"29"},{"size":547,"mtime":1608744359640,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":1608653663860,"results":"31","hashOfConfig":"29"},{"size":4000,"mtime":1610049197190,"results":"32","hashOfConfig":"29"},{"size":6341,"mtime":1609884531695,"results":"33","hashOfConfig":"29"},{"size":3229,"mtime":1609884604751,"results":"34","hashOfConfig":"29"},{"size":2246,"mtime":1609884061986,"results":"35","hashOfConfig":"29"},{"size":4620,"mtime":1609883836046,"results":"36","hashOfConfig":"29"},{"size":5014,"mtime":1609883752474,"results":"37","hashOfConfig":"29"},{"size":2786,"mtime":1609883914225,"results":"38","hashOfConfig":"29"},{"size":5988,"mtime":1610032827086,"results":"39","hashOfConfig":"29"},{"size":1233,"mtime":1609884252011,"results":"40","hashOfConfig":"29"},{"size":1891,"mtime":1609884379534,"results":"41","hashOfConfig":"29"},{"size":177,"mtime":1608744359641,"results":"42","hashOfConfig":"29"},{"size":4890,"mtime":1610049973821,"results":"43","hashOfConfig":"29"},{"size":638,"mtime":1609885882114,"results":"44","hashOfConfig":"29"},{"size":9150,"mtime":1610048367582,"results":"45","hashOfConfig":"29"},{"size":3476,"mtime":1609885227290,"results":"46","hashOfConfig":"29"},{"size":4048,"mtime":1609885489154,"results":"47","hashOfConfig":"29"},{"size":1332,"mtime":1609884953540,"results":"48","hashOfConfig":"29"},{"size":554,"mtime":1609000973611,"results":"49","hashOfConfig":"29"},{"size":1377,"mtime":1609885061760,"results":"50","hashOfConfig":"29"},{"size":978,"mtime":1609885252898,"results":"51","hashOfConfig":"29"},{"size":1002,"mtime":1609885366809,"results":"52","hashOfConfig":"29"},{"size":344,"mtime":1609091563563,"results":"53","hashOfConfig":"29"},{"size":756,"mtime":1609885516193,"results":"54","hashOfConfig":"29"},{"size":760,"mtime":1609885539800,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1ockjjl",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/App.js",[],["129","130"],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/index.js",[],["131","132"],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/reportWebVitals.js",[],["133","134"],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/Navigation.js",["135"],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/Ranking.js",["136"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Container, Row, Button, Col, ListGroup, ListGroupItem, Badge } from 'reactstrap'\nimport { Image } from 'react-bootstrap'\n\nimport { serverUrl, red, redDark, redLight, greyDark, greyLight } from '../tools/globalVariables'\nimport { fullNamePilot, namePilot, flagNationality } from '../tools/functions'\n\nfunction Ranking(props) {\n\n  props.changeScreen('Classement et résultats')\n\n  // Styles for buttons\n  const styleActiveBtn = {\n    width: 120,\n    backgroundColor: red,\n    borderColor: redDark\n  }\n\n  const styleInactiveBtn = {\n    width: 120,\n    backgroundColor: greyLight,\n    borderColor: greyDark\n  }\n\n  const [teamToDisplay, setTeamToDisplay] = useState([]);\n  const [allResults, setAllResults] = useState([]);\n  const [styleBtnReg, setStyleBtnReg] = useState(styleActiveBtn)\n  const [styleBtnComp, setStyleBtnComp] = useState(styleInactiveBtn)\n\n  const categoryRegularity = ['Basse', 'Intermédiaire', 'Haute'];\n\n  useEffect(() => {\n    async function getResults() {\n      const rawAnswer = await fetch(`${serverUrl}/results/results`, {\n        method: 'GET',\n      });\n      let answer = await rawAnswer.json();\n      setAllResults(answer.results);\n\n      //// Setting displayed result on regularity ////\n      let filteredTeams = answer.results.filter(team => categoryRegularity.includes(team.team_id.category));\n      setTeamToDisplay(filteredTeams);\n    }\n    getResults()\n  }, []);\n\n  //// Functions for filtering results with category ////\n  let filterRegularity = () => {\n    const filteredTeams = allResults.filter(team => categoryRegularity.includes(team.team_id.category));\n    setTeamToDisplay(filteredTeams);\n\n    setStyleBtnComp(styleInactiveBtn)\n    setStyleBtnReg(styleActiveBtn)\n  }\n\n  let filterCompetition = () => {\n    const filteredTeams = allResults.filter(team => !categoryRegularity.includes(team.team_id.category));\n    setTeamToDisplay(filteredTeams);\n\n    setStyleBtnComp(styleActiveBtn)\n    setStyleBtnReg(styleInactiveBtn)\n  }\n\n\n  //// Building card result ////\n  let teamRankingBig = teamToDisplay.map((team, i) => {\n    return (\n      <Col md='12' className=\"d-none d-md-block\" >\n        <ListGroupItem style={{ display: 'flex', alignItems: 'center', backgroundColor: redLight }}>\n\n          {/* Style for badge depending on the position */}\n          {team.position === 1 ?\n            <Badge style={{ marginRight: '3%', width: '7%', backgroundColor: 'gold' }}>{team.position}</Badge>\n            : team.position === 2 ?\n              <Badge style={{ marginRight: '3%', width: '7%', backgroundColor: 'silver' }}>{team.position}</Badge>\n              : team.position === 3 ?\n                <Badge style={{ marginRight: '3%', width: '7%', backgroundColor: '#BA660D' }}>{team.position}</Badge>\n                : <Badge style={{ marginRight: '3%', width: '7%', backgroundColor: redDark }}>{team.position}</Badge>}\n\n\n          <div style={{ width: '10%' }}>#{team.team_id.car_id}</div>\n\n          <div style={{ display: 'flex', flexDirection: 'column', width: '60%' }}>\n            <div><Image src={flagNationality(team.team_id.pilot_1.nationality)} width='20px' /> {fullNamePilot(team.team_id.pilot_1.firstname, team.team_id.pilot_1.name)}</div>\n            <div><Image src={flagNationality(team.team_id.pilot_1.nationality)} width='20px' /> {fullNamePilot(team.team_id.pilot_2.firstname, team.team_id.pilot_2.name)}</div>\n          </div>\n\n          <div style={{ display: 'flex', flexDirection: 'column', width: '20%' }}>\n            <div>{team.time}</div>\n            {team.diff !== '' ? <div><small style={{ color: redDark }}>+{team.diff}</small></div> : <div></div>}\n          </div>\n\n        </ListGroupItem>\n      </Col>\n    )\n  })\n\n  let teamRankingSmall = teamToDisplay.map((team, i) => {\n    return (\n      <Col xs='12' className=\"d-block d-md-none\" >\n        <ListGroupItem style={{ display: 'flex', alignItems: 'center', backgroundColor: redLight }}>\n\n          {/* Style for badge depending on the position */}\n          {team.position === 1 ?\n            <Badge style={{ marginRight: '3%', width: '7%', backgroundColor: 'gold' }}>{team.position}</Badge>\n            : team.position === 2 ?\n              <Badge style={{ marginRight: '3%', width: '7%', backgroundColor: 'silver' }}>{team.position}</Badge>\n              : team.position === 3 ?\n                <Badge style={{ marginRight: '3%', width: '7%', backgroundColor: '#BA660D' }}>{team.position}</Badge>\n                : <Badge style={{ marginRight: '3%', width: '7%', backgroundColor: redDark }}>{team.position}</Badge>}\n\n          <div style={{ marginRight: '3%', width: '10%' }}>#{team.team_id.car_id}</div>\n\n          <div style={{ display: 'flex', flexDirection: 'column', width: '57%' }}>\n            <div><Image src={flagNationality(team.team_id.pilot_1.nationality)} width='20px' /> {namePilot(team.team_id.pilot_1.firstname, team.team_id.pilot_1.name)}</div>\n            <div><Image src={flagNationality(team.team_id.pilot_1.nationality)} width='20px' /> {namePilot(team.team_id.pilot_2.firstname, team.team_id.pilot_2.name)}</div>\n          </div>\n\n          <div style={{ display: 'flex', flexDirection: 'column', width: '20%' }}>\n            <div>{team.time}</div>\n            {team.diff !== '' ? <div><small style={{ color: redDark }}>+{team.diff}</small></div> : <div></div>}\n          </div>\n\n        </ListGroupItem>\n      </Col>\n    )\n  })\n\n  return (\n\n    <Container fluid style={{\n      margin: 0,\n      paddingLeft: '10%',\n      paddingRight: '10%',\n      paddingTop: '3%',\n      height: '100vh'\n    }}>\n      <div style={{ marginBottom: '3%', display: 'flex', justifyContent: 'center' }}>\n\n        <Button onClick={() => filterRegularity()} style={styleBtnReg} >Régularité</Button>\n        <Button onClick={() => filterCompetition()} style={styleBtnComp}>Compétition</Button>\n\n      </div>\n      <Row>\n        <Col>\n          <ListGroup>\n            {teamRankingBig}\n            {teamRankingSmall}\n          </ListGroup>\n        </Col>\n      </Row>\n\n    </Container>\n\n  );\n}\n\n// Redux functions\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeScreen: function (screen) {\n      dispatch({ type: 'changeScreen', screen })\n    }\n  }\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Ranking);\n","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/Teams.js",[],["137","138"],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/Media.js",[],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/Infos.js",["139","140","141"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { Accordion, Card } from 'react-bootstrap'\nimport { Container, Row, Col } from 'reactstrap'\n\nimport { serverUrl, redLight, redDark, colorLight } from '../tools/globalVariables'\n\nfunction Infos(props) {\n  props.changeScreen('Informations pratiques')\n\n  const [dataArray, setDataArray] = useState([]);\n  const [hotel, setHotel] = useState()\n  const [catering, setCatering] = useState()\n  const [shuttle, setShuttle] = useState()\n\n  useEffect(() => {\n    const getData = async () => {\n\n      //// Getting data of accomodation and catering ////\n      const rawAnswer = await fetch(`${serverUrl}/user/get-info/mock?token=${props.userInfos.token}`, {\n        method: 'GET'\n      })\n      const answer = await rawAnswer.json();\n\n      //// Format all content field of accordion menu ////\n      if (answer.accomodation.length > 0) {\n        setHotel(\n          <Card style={{ borderLeft: 'none', borderRight: 'none', borderTopColor: redLight }}>\n            <Accordion.Toggle as={Card.Header} eventKey='0' style={{ backgroundColor: redDark, color: colorLight }}>\n              Hôtel du soir\n        </Accordion.Toggle>\n            <Accordion.Collapse eventKey='0'>\n              <Card.Body style={{ backgroundColor: redLight }}>\n                <div>{answer.accomodation[0].name}</div>\n                <div>{answer.accomodation[0].adress}</div>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        )\n\n        setCatering(\n          <Card style={{ borderLeft: 'none', borderRight: 'none', borderTopColor: redLight }}>\n            <Accordion.Toggle as={Card.Header} eventKey='1' style={{ backgroundColor: redDark, color: colorLight }}>\n              Restauration\n        </Accordion.Toggle>\n            <Accordion.Collapse eventKey='1'>\n              <Card.Body style={{ backgroundColor: redLight }}>\n                <div>{answer.catering[0].adress}</div>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        )\n\n        setShuttle(\n          <Card style={{ borderLeft: 'none', borderRight: 'none', borderTopColor: redLight }}>\n            <Accordion.Toggle as={Card.Header} eventKey='2' style={{ backgroundColor: redDark, color: colorLight }}>\n              Infos navettes\n        </Accordion.Toggle>\n            <Accordion.Collapse eventKey='2'>\n              <Card.Body style={{ backgroundColor: redLight }}>\n                <p>Les navettes que nous vous proposons vous déposent à vos hôtels et aux Parcs Fermés. Les horaires affichés sont à titre indicatif. Les rotations des navettes sont prévues toutes les 30 minutes jusqu'à 9h.</p>\n                <p>Point de RDV: {answer.accomodation[0].shuttle_point}</p>\n                <div>Horaires: {answer.accomodation[0].shuttle_hours.map(shuttle => { return <div key={shuttle}>{shuttle}</div> })}</div>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        )\n      } else {\n        setHotel(\n          <p>\n            <div style={{ fontWeight: 'bold', color: redDark }}>Attention : vous n'êtes pas enregistré dans un hôtel pour ce soir</div>\n            <div style={{ fontWeight: 'bold', color: redDark }}>Prevenez immédiatement l'organisation</div>\n          </p>\n        )\n      }\n    }\n    getData()\n  }, [])\n\n  // Secure myAccount screen if user is not logged in\n  if (props.userInfos.email == null) {\n    return <Redirect to='/' />\n  }\n\n  return (\n    <Container fluid style={{\n      margin: 0,\n      paddingLeft: '10%',\n      paddingRight: '10%',\n      paddingTop: '3%',\n      height: '100%'\n    }}>\n\n      <p>{props.userInfos.firstName}, </p>\n      <p>Vous trouverez ici, toutes les informations utiles pour votre hébergement, les points de restauration ainsi que les horaires des navettes allant du Parc Fermé à votre hôtel. </p>\n      <p>Si vous utilisez nos services de bagageries, n'oubliez pas de récupérer vos bagages avant de prendre la navette qui vous déposera à votre hôtel. </p>\n\n\n      <Row>\n        <Col>\n          <Accordion >\n            {hotel}\n            {catering}\n            {shuttle}\n          </Accordion>\n        </Col>\n      </Row>\n\n    </Container>\n  );\n}\n\n// Redux functions\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeScreen: function (screen) {\n      dispatch({ type: 'changeScreen', screen })\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userInfos: state.userInfos\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Infos);\n",["142","143"],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/Chat.js",["144","145","146","147"],"import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { Container, Row, Button, Col, ListGroup, ListGroupItem, Input } from 'reactstrap'\nimport socketIOClient from 'socket.io-client'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons'\n\nimport { serverUrl, redLight, red, redDark, greyDark, greyLight, colorLight } from '../tools/globalVariables'\n\nvar socket = socketIOClient(serverUrl)\n\nfunction Chat(props) {\n  props.changeScreen('Messagerie instantanée')\n\n  const [currentMsg, setCurrentMsg] = useState('')\n  const [room, setRoom] = useState('Officiel')\n\n  const styleActiveBtn = {\n    width: 120,\n    backgroundColor: red,\n    borderColor: redDark\n  }\n\n  const styleInactiveBtn = {\n    width: 120,\n    backgroundColor: greyLight,\n    borderColor: greyDark\n  }\n\n  const [showOfficial, setShowOfficial] = useState(true)\n  const [styleBtnOfficial, setStyleBtnOfficial] = useState(styleActiveBtn)\n  const [styleBtnPublic, setStyleBtnPublic] = useState(styleInactiveBtn)\n\n\n  useEffect(() => {\n\n    // Function to retrieve chat history\n    async function getHistoryChat(roomName) {\n      const rawAnswer = await fetch(`${serverUrl}/chat/get-chat?room=${roomName}`, {\n        method: 'GET',\n      });\n      let chatInfo = (await rawAnswer.json()).roomInfo;\n      props.storeChat(chatInfo.history, chatInfo.roomName)\n    }\n\n    // Open socket between front and back\n    socket.on('messageFromChannel', (newMsg) => {\n      props.storeChat([newMsg.messageInfo], newMsg.room)\n      updateHistoryChat(newMsg.room, newMsg.messageInfo)\n    })\n\n    // Call functions\n    getHistoryChat('Officiel')\n    getHistoryChat('Public')\n  }, [])\n\n\n  // Secure myAccount screen if user is not logged in\n  if (props.userInfos.email == null) {\n    return <Redirect to='/' />\n  }\n\n\n  async function updateHistoryChat(roomName, msg) {\n    await fetch(`${serverUrl}/chat/update-chat`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `room=${roomName}&newMsg=${JSON.stringify(msg)}`\n    })\n  }\n\n  // Create list of messages in each room\n  var chatOfficiel = props.chatHistory.map((msg, i) => {\n    if (msg.room === 'Officiel') {\n      return (\n        <ListGroupItem style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', backgroundColor: redLight }}>\n          <div>{msg.msg.msg}</div>\n          <small>{msg.msg.sender} - {msg.msg.status}</small>\n        </ListGroupItem>\n      )\n    }\n  })\n\n  var chatRoom = props.chatHistory.map((msg, i) => {\n    if (msg.room === \"Public\") {\n      return (\n        <ListGroupItem style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', backgroundColor: redLight }}>\n          <div>{msg.msg.msg}</div>\n          <small>{msg.msg.sender} - {msg.msg.status}</small>\n        </ListGroupItem>\n      )\n    }\n\n  })\n\n  var handleChangeRoom = (roomNumber) => {\n    setRoom(roomNumber)\n    socket.emit('changeRoom', { newRoom: roomNumber.toString() })\n\n  }\n\n  return (\n    <Container fluid style={{\n      margin: 0,\n      paddingLeft: '10%',\n      paddingRight: '10%',\n      paddingTop: '3%',\n      height: '100vh'\n    }}>\n      <div style={{ marginBottom: '3%', display: 'flex', justifyContent: 'center' }}>\n\n        <Button onClick={() => { setShowOfficial(true); setStyleBtnOfficial(styleActiveBtn); setStyleBtnPublic(styleInactiveBtn); handleChangeRoom('Officiel') }} style={styleBtnOfficial} >Officiel</Button>\n        <Button onClick={() => { setShowOfficial(false); setStyleBtnOfficial(styleInactiveBtn); setStyleBtnPublic(styleActiveBtn); handleChangeRoom('Public') }} style={styleBtnPublic}>Public</Button>\n\n      </div>\n\n      <div style={{ display: 'flex', marginBottom: 20 }}>\n        <Input id='message' placeholder='Mon message' value={currentMsg} type='text' onChange={(e) => { setCurrentMsg(e.target.value) }} />\n        <Button onClick={() => {\n          socket.emit('messageToChannel', { msg: currentMsg, sender: props.userInfos.firstName, status: props.userInfos.status });\n          setCurrentMsg('')\n        }}\n          style={{ backgroundColor: redDark, color: colorLight, border: 'none', marginLeft: 10 }}><FontAwesomeIcon icon={faPaperPlane} /></Button>\n      </div>\n\n      <Row>\n        <Col>\n          <ListGroup>\n            {showOfficial ? chatOfficiel : chatRoom}\n          </ListGroup>\n        </Col>\n      </Row>\n\n    </Container>\n  );\n}\n\n// Redux functions\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeScreen: function (screen) {\n      dispatch({ type: 'changeScreen', screen })\n    },\n    storeChat: function (newMsg, roomName) {\n      dispatch({ type: 'storeChat', newMsg, roomName })\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userInfos: state.userInfos,\n    chatHistory: state.chatHistory\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Chat);\n",["148","149"],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/MapLive.js",["150"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport socketIOClient from \"socket.io-client\";\n\nimport ModalMapLive from '../components/ModalMapLive'\nimport { serverUrl } from '../tools/globalVariables'\n\nconst socket = socketIOClient(serverUrl);\n\nfunction MapLive(props) {\n\n  props.changeScreen('Suivi en direct')\n\n  const [vehiculeToDisplay, setVehiculeToDisplay] = useState([]);\n  const [userFavorites, setUserFavorites] = useState([]);\n  const [visibleLogin, setVisibleLogin] = useState(false);\n  const [visibleFavorites, setVisibleFavorites] = useState(false);\n  const [modalShow, setModalShow] = useState(true);\n\n  useEffect(() => {\n    socket.on('sendPositionToAll', (msg) => {\n      setVehiculeToDisplay(msg.allPosition)\n    })\n\n    if (props.userInfos.token === undefined) {\n      setVisibleLogin(!visibleLogin);\n    } else if (props.userFavorites.length === 0) {\n      setVisibleFavorites(!visibleFavorites);\n    }\n  }, []);\n\n  ///// Update the marker list to display if favorites changes /////\n  useEffect(() => {\n    const favList = props.userFavorites.map(fav => fav.car_id);\n    setUserFavorites(favList);\n  }, [props.userFavorites]);\n\n  ///// Filter the teams to display with favorites of the user connected /////\n  const displayWithFavorite = vehiculeToDisplay.filter(car => userFavorites.includes(car.idVehicule));\n\n  ///// Build the array of marker /////\n  const markerVehicules = displayWithFavorite.map((car, i) => {\n    return <Marker position={[car.lat, car.long]}>\n      <Popup>#{car.idVehicule.toString()}</Popup>\n    </Marker>\n  })\n\n  return (\n    <MapContainer style={{ height: '100vh' }} center={[48.847648, 2.274218]} zoom={13} scrollWheelZoom={false}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n\n      {userFavorites.length === 0 ?\n        <ModalMapLive show={modalShow} onHide={() => setModalShow(false)} text='Ajouter des favoris pour les suivre en direct sur la carte' />\n        : ''}\n\n      {props.userInfos.email == null ?\n        <ModalMapLive show={modalShow} onHide={() => setModalShow(false)} text='Connectez vous pour accéder à cette fonctionnalité' />\n        : ''}\n\n      {markerVehicules}\n    </MapContainer>\n  );\n}\n\n// Redux functions\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeScreen: function (screen) {\n      dispatch({ type: 'changeScreen', screen })\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userFavorites: state.userFavorites,\n    userInfos: state.userInfos\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MapLive);\n","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/MyAccount.js",["151"],"import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { Input, Container, Row, Button, Col, Card, CardText, CardBody, CardTitle } from 'reactstrap'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPenSquare } from '@fortawesome/free-solid-svg-icons'\n\nimport ModalModifyAccount from '../components/ModalModifyAccount'\nimport { serverUrl, genericAvatarUrl, redLight, redDark, colorLight } from '../tools/globalVariables'\n\n\nfunction MyAccount(props) {\n\n  props.changeScreen('Mon compte')\n\n  const [avatar, setAvatar] = useState(props.userInfos.avatar === null || props.userInfos.avatar === '' || props.userInfos.avatar === undefined ? genericAvatarUrl : props.userInfos.avatar)\n  const [firstName, setFirstName] = useState(props.userInfos.firstName)\n  const [lastName, setLastName] = useState(props.userInfos.lastName)\n  const [nationality, setNationality] = useState(props.userInfos.nationality)\n  const [password, setPassword] = useState('')\n  const [modalPassShow, setModalPassShow] = useState(false);\n  const [modalInfosShow, setModalInfosShow] = useState(false);\n\n  // Secure myAccount screen if user is not logged in\n  if (props.userInfos.email == null) {\n    return <Redirect to='/' />\n  }\n\n  const handleChangePassword = async () => {\n    // Modify password in BDD\n    await fetch(`${serverUrl}/user/update-password`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `token=${props.userInfos.token}&newValue=${password}`\n    })\n\n    setPassword('')\n  }\n\n  const handleSaveNewProfile = async () => {\n    // Create object for updating BDD\n    const updateFields = {\n      userFirstName: firstName,\n      userLastName: lastName,\n      userNationality: nationality,\n      userEmail: props.userInfos.email,\n      userAvatar: avatar\n    }\n\n    // Create object for reducer\n    const newProfile = {\n      firstname: firstName,\n      lastname: lastName,\n      nationality: nationality,\n      email: props.userInfos.email,\n      avatar: avatar,\n      token: props.userInfos.token,\n      status: props.userInfos.status\n    }\n\n    props.recordUser(newProfile);\n\n    const strUpdateFields = JSON.stringify(updateFields)\n\n    // Modify user in BDD\n    await fetch(`${serverUrl}/user/update-user`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `token=${props.userInfos.token}&newValue=${strUpdateFields}`\n    })\n  }\n\n  // Generate both modals\n  const modalPassContent = (\n    <Input id='password' placeholder='Nouveau mot de passe' type='password' onChange={(e) => { setPassword(e.target.value) }} />\n  )\n\n  const modalInfosContent = (\n    <div>\n      <p>Prénom : <Input id='firstName' value={firstName} placeholder='Prénom' type='text' onChange={(e) => { setFirstName(e.target.value) }} /></p>\n      <p>Nom : <Input id='lastName' value={lastName} placeholder='Nom' type='text' onChange={(e) => { setLastName(e.target.value) }} /></p>\n      <p>Code nationalité : <Input id='nationality' value={nationality} placeholder='Code nationalité' type='text' onChange={(e) => { setNationality(e.target.value) }} /></p>\n    </div>\n  )\n\n  return (\n    <Container fluid style={{\n      margin: 0,\n      paddingLeft: '10%',\n      paddingRight: '10%',\n      paddingTop: '3%',\n      height: '100%'\n    }}>\n\n      <Row>\n        <Col>\n\n          <ModalModifyAccount show={modalPassShow} onHide={() => setModalPassShow(false)} content={modalPassContent} click={() => handleChangePassword()} />\n          <ModalModifyAccount show={modalInfosShow} onHide={() => setModalInfosShow(false)} content={modalInfosContent} click={() => handleSaveNewProfile()} />\n\n          <Card style={{ borderColor: redLight }}>\n            <CardBody>\n              <CardTitle tag=\"h5\">Mes informations personnelles</CardTitle>\n            </CardBody>\n            <CardBody>\n              <div style={{ display: 'flex' }}>\n                <div style={{ width: '30%', marginRight: '5%' }}>\n                  <img width='100%' src={avatar} alt=\"My avatar\" />\n                </div>\n\n                <div style={{ display: 'flex', flexDirection: 'column', width: \"65%\" }}>\n                  <div style={{ display: 'flex', alignItems: 'center' }}>\n                    <FontAwesomeIcon icon={faPenSquare} onClick={() => setModalInfosShow(true)} style={{ color: redDark, marginRight: 5 }} />\n                    <CardText>Prénom: {firstName}</CardText>\n                  </div>\n\n                  <div style={{ display: 'flex', alignItems: 'center' }}>\n                    <FontAwesomeIcon icon={faPenSquare} onClick={() => setModalInfosShow(true)} style={{ color: redDark, marginRight: 5 }} />\n                    <CardText>Nom: {lastName}</CardText>\n                  </div>\n\n                  <div style={{ display: 'flex', alignItems: 'center', marginBottom: 10 }}>\n                    <FontAwesomeIcon icon={faPenSquare} onClick={() => setModalInfosShow(true)} style={{ color: redDark, marginRight: 5 }} />\n                    <CardText>Nationalité: {nationality}</CardText>\n                  </div>\n\n                  <CardText>Email: {props.userInfos.email}</CardText>\n                  <Button onClick={() => setModalPassShow(true)} style={{ backgroundColor: redDark, color: colorLight, border: 'none', width: '80%' }}>Modifier mot de passe</Button>\n                </div>\n              </div>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n\n    </Container>\n  );\n}\n\n// Redux functions\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeScreen: function (screen) {\n      dispatch({ type: 'changeScreen', screen })\n    },\n    recordUser: function (user) {\n      dispatch({ type: 'record', user: user })\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userInfos: state.userInfos\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MyAccount);\n","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/News.js",[],["152","153"],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/screens/Program.js",[],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/reducers/screenName.reducer.js",["154"],"export default function (screenName = 'Accueil', action) {\n\n    if (action.type === 'changeScreen') {\n        return action.screen\n    } else {\n        return screenName\n    }\n}","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/SignInUp.js",[],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/reducers/userInfos.reducer.js",["155"],"export default function (userInfos = {}, action) {\n\n  if (action.type === 'record') {\n      return {\n          token: action.user.token,\n          status: action.user.status,\n          firstName: action.user.firstname,\n          lastName: action.user.name,\n          email: action.user.email,\n          avatar: action.user.avatar,\n          nationality: action.user.nationality\n      }\n\n  } else if (action.type === 'reset') {\n      return {}\n\n  } else if (action.type === 'changeAvatar') {\n      let updatedUser = { ...userInfos };\n      updatedUser.avatar = action.url;\n      return updatedUser\n\n  } else {\n      return userInfos;\n  }\n}","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/tools/globalVariables.js",[],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/CardTeam.js",["156"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Card, CardTitle, CardImg, CardImgOverlay, Col } from 'reactstrap'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHeart, faSearch } from '@fortawesome/free-solid-svg-icons'\n\nimport DetailTeam from '../components/DetailTeam'\nimport { colorDark, greyBlack, serverUrl, red } from '../tools/globalVariables'\n\n\nfunction CardTeam(props) {\n\n  // Style for buttons\n  const styleFavHeart = {\n    color: red,\n    fontSize: 23\n  }\n\n  const styleDefHeart = {\n    color: greyBlack,\n    fontSize: 23\n  }\n\n  const styleZoom = {\n    color: greyBlack,\n    fontSize: 23,\n    marginTop: 10\n  }\n\n  const [modalShow, setModalShow] = useState(false)\n  const [styleHeart, setStyleHeart] = useState(styleDefHeart)\n  const team = props.infoTeam;\n\n\n  useEffect(() => {\n\n    // Add red heart on teams that are recorded as favorites\n    const inFavorites = props.userFavorites.filter(fav => fav._id === team._id);\n    if (inFavorites.length > 0) {\n      setStyleHeart(styleFavHeart)\n    } else {\n      setStyleHeart(styleDefHeart)\n    }\n  }, [props.userFavorites])\n\n  const handleFavorite = async (numTeam, bib) => {\n    const filteredFav = props.userFavorites.filter(fav => fav._id === numTeam);\n\n    // Add or Remove this team from my favorites\n    if (filteredFav.length < 1) {\n      props.addFavoriteTeam({\n        _id: numTeam,\n        car_id: bib\n      })\n      setStyleHeart(styleFavHeart)\n\n      // Add new favorite in BDD\n      await fetch(`${serverUrl}/user/add-favorite`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        body: `token=${props.userInfos.token}&newValue=${numTeam}`\n      })\n\n    } else {\n      props.removeFavoriteTeam(numTeam)\n      setStyleHeart(styleDefHeart)\n\n      // Remove favorite in BDD\n      await fetch(`${serverUrl}/user/remove-favorite`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        body: `token=${props.userInfos.token}&valueToRemove=${numTeam}`\n      })\n    }\n  }\n\n  // Return responsive cards\n  return (\n    <Col xs=\"12\" sm=\"6\" md='4' lg='3' >\n\n      <DetailTeam team={team} show={modalShow} onHide={() => setModalShow(false)} />\n\n      <Card style={{ marginBottom: 30 }}>\n        <CardImg style={{ opacity: 0.5 }} src={team.car.image} alt=\"car picture\" />\n        <CardImgOverlay style={{ color: colorDark }}>\n          <CardTitle tag=\"h2\">#{team.car_id}</CardTitle>\n\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            {props.userInfos.token != null ?\n              <FontAwesomeIcon icon={faHeart} style={styleHeart} onClick={() => { handleFavorite(team._id, team.car_id) }} />\n              : ''}\n            <FontAwesomeIcon icon={faSearch} style={styleZoom} onClick={() => setModalShow(true)} />\n          </div>\n\n        </CardImgOverlay>\n      </Card>\n\n    </Col>\n  )\n}\n\n// Redux functions\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addFavoriteTeam: function (numTeam) {\n      dispatch({ type: 'addFavoriteTeam', numTeam })\n    },\n    removeFavoriteTeam: function (numTeam) {\n      dispatch({\n        type: 'removeFavoriteTeam',\n        numTeam\n      })\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userFavorites: state.userFavorites,\n    userInfos: state.userInfos\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CardTeam);\n","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/DetailTeam.js",["157"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Modal, Button, Image } from 'react-bootstrap'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\n\nimport { greyBlack, serverUrl, colorLight, redDark, red } from '../tools/globalVariables'\nimport { namePilot, fullNamePilot, flagNationality } from '../tools/functions'\n\n\nfunction DetailTeam(props) {\n\n  // Style for heart picto\n  const styleFavHeart = {\n    color: red,\n    fontSize: 23\n  }\n\n  const styleDefHeart = {\n    color: greyBlack,\n    fontSize: 23\n  }\n  const [styleHeart, setStyleHeart] = useState(styleDefHeart)\n  const team = props.team\n\n  useEffect(() => {\n\n    // Color in red the picto of favorite teams\n    const inFavorites = props.userFavorites.filter(fav => fav._id === team._id);\n    if (inFavorites.length > 0) {\n      setStyleHeart(styleFavHeart)\n    } else {\n      setStyleHeart(styleDefHeart)\n    }\n  }, [props.userFavorites])\n\n\n  const handleFavorite = async (numTeam, bib) => {\n    const filteredFav = props.userFavorites.filter(fav => fav._id === numTeam);\n\n    // Add or Remove this team from my favorites\n    if (filteredFav.length < 1) {\n      props.addFavoriteTeam({\n        _id: numTeam,\n        car_id: bib\n      })\n      setStyleHeart(styleFavHeart)\n\n      // Add new favorite in BDD\n      await fetch(`${serverUrl}/user/add-favorite`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        body: `token=${props.userInfos.token}&newValue=${numTeam}`\n      })\n\n    } else {\n      props.removeFavoriteTeam(numTeam)\n      setStyleHeart(styleDefHeart)\n\n      // Remove favorite in BDD\n      await fetch(`${serverUrl}/user/remove-favorite`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        body: `token=${props.userInfos.token}&valueToRemove=${numTeam}`\n      })\n    }\n  }\n\n  return (\n    <Modal show={props.show} onHide={props.onHide} size=\"lg\" centered >\n\n      <Modal.Header style={{ backgroundColor: redDark, color: colorLight }}>\n        <h4><b>#{team.car_id}</b> - {namePilot(team.pilot_1.firstname, team.pilot_1.name)} / {namePilot(team.pilot_2.firstname, team.pilot_2.name)}</h4>\n      </Modal.Header>\n\n      <Modal.Body style={{ flexDirection: 'column' }}>\n        <div>{team.car.brand} - {team.car.model}<i> - {team.car.year}</i></div>\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: 15, marginBottom: 25 }}>\n          <Image src={team.car.image} width='90%' />\n        </div>\n        <div style={{ marginBottom: 15 }}>{team.car.description}</div>\n        <div>Pilote 1: <Image src={flagNationality(team.pilot_1.nationality)} width='20px' /> {fullNamePilot(team.pilot_1.firstname, team.pilot_1.name)}</div>\n        <div>Pilote 2: <Image src={flagNationality(team.pilot_1.nationality)} width='20px' /> {fullNamePilot(team.pilot_2.firstname, team.pilot_2.name)}</div>\n      </Modal.Body>\n\n      <Modal.Footer >\n        {props.userInfos.token != null ?\n          <FontAwesomeIcon icon={faHeart} style={styleHeart} onClick={() => { handleFavorite(team._id, team.car_id) }} />\n          : ''}\n        <Button style={{ margin: 10, backgroundColor: redDark, color: colorLight, borderColor: redDark }} onClick={() => { props.onHide() }} >Retour</Button>\n      </Modal.Footer>\n\n    </Modal>\n  );\n}\n\n// Redux functions\nfunction mapDispatchToProps(dispatch) {\n  return {\n    record: function (user) {\n      dispatch({ type: 'record', user })\n    },\n    addFavoriteTeam: function (numTeam) {\n      dispatch({ type: 'addFavoriteTeam', numTeam })\n    },\n    removeFavoriteTeam: function (numTeam) {\n      dispatch({\n        type: 'removeFavoriteTeam',\n        numTeam\n      })\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userFavorites: state.userFavorites,\n    userInfos: state.userInfos\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DetailTeam);\n","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/tools/functions.js",[],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/reducers/userFavorites.reducer.js",["158"],"export default function (userFavorites = [], action) {\n\n  if (action.type === 'addFavoriteTeam') {\n    let newFavorites = [...userFavorites];\n    newFavorites.push(action.numTeam);\n    return newFavorites\n\n  } else if (action.type === 'removeFavoriteTeam') {\n\n    const filteredFav = userFavorites.filter(fav => fav._id !== action.numTeam);\n\n    return filteredFav\n\n  } else if (action.type === 'retrieveFavoriteTeam') {\n    return action.listFavorites\n\n  } else if (action.type === \"reset\") {\n    return []\n    \n  } else {\n    return userFavorites\n  }\n}","/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/CardNews.js",[],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/DetailNews.js",[],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/DetailProgram.js",[],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/reducers/chatHistory.reducer.js",["159","160"],"export default function (chatHistory = [], action) {\n\n  if (action.type === 'storeChat') {\n      let newHistory = [...chatHistory]\n      action.newMsg.map((msg) => {\n          newHistory.push({\n              msg,\n              room: action.roomName\n          })\n      })\n      \n      return newHistory\n\n  } else {\n      return chatHistory\n  }\n}",["161","162"],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/ModalMapLive.js",[],"/Users/manonle/Documents/HomeMade/Capsule/rallyeweb/src/components/ModalModifyAccount.js",[],{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"163","replacedBy":"167"},{"ruleId":"165","replacedBy":"168"},{"ruleId":"163","replacedBy":"169"},{"ruleId":"165","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":23,"column":6,"nodeType":"173","endLine":23,"endColumn":14,"suggestions":"174"},{"ruleId":"171","severity":1,"message":"175","line":46,"column":6,"nodeType":"173","endLine":46,"endColumn":8,"suggestions":"176"},{"ruleId":"163","replacedBy":"177"},{"ruleId":"165","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":12,"column":10,"nodeType":"181","messageId":"182","endLine":12,"endColumn":19},{"ruleId":"179","severity":1,"message":"183","line":12,"column":21,"nodeType":"181","messageId":"182","endLine":12,"endColumn":33},{"ruleId":"171","severity":1,"message":"184","line":79,"column":6,"nodeType":"173","endLine":79,"endColumn":8,"suggestions":"185"},{"ruleId":"163","replacedBy":"186"},{"ruleId":"165","replacedBy":"187"},{"ruleId":"179","severity":1,"message":"188","line":18,"column":10,"nodeType":"181","messageId":"182","endLine":18,"endColumn":14},{"ruleId":"171","severity":1,"message":"189","line":57,"column":6,"nodeType":"173","endLine":57,"endColumn":8,"suggestions":"190"},{"ruleId":"191","severity":1,"message":"192","line":75,"column":53,"nodeType":"193","messageId":"194","endLine":75,"endColumn":55},{"ruleId":"191","severity":1,"message":"192","line":86,"column":49,"nodeType":"193","messageId":"194","endLine":86,"endColumn":51},{"ruleId":"163","replacedBy":"195"},{"ruleId":"165","replacedBy":"196"},{"ruleId":"171","severity":1,"message":"197","line":31,"column":6,"nodeType":"173","endLine":31,"endColumn":8,"suggestions":"198"},{"ruleId":"179","severity":1,"message":"199","line":17,"column":18,"nodeType":"181","messageId":"182","endLine":17,"endColumn":27},{"ruleId":"163","replacedBy":"200"},{"ruleId":"165","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":1,"column":1,"nodeType":"204","endLine":8,"endColumn":2},{"ruleId":"202","severity":1,"message":"203","line":1,"column":1,"nodeType":"204","endLine":25,"endColumn":2},{"ruleId":"171","severity":1,"message":"205","line":45,"column":6,"nodeType":"173","endLine":45,"endColumn":27,"suggestions":"206"},{"ruleId":"171","severity":1,"message":"205","line":36,"column":6,"nodeType":"173","endLine":36,"endColumn":27,"suggestions":"207"},{"ruleId":"202","severity":1,"message":"203","line":1,"column":1,"nodeType":"204","endLine":23,"endColumn":2},{"ruleId":"202","severity":1,"message":"203","line":1,"column":1,"nodeType":"204","endLine":17,"endColumn":2},{"ruleId":"191","severity":1,"message":"208","line":5,"column":31,"nodeType":"193","messageId":"209","endLine":5,"endColumn":33},{"ruleId":"163","replacedBy":"210"},{"ruleId":"165","replacedBy":"211"},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],["212"],["213"],["212"],["213"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.userInfos.length'. Either include it or remove the dependency array.","ArrayExpression",["214"],"React Hook useEffect has a missing dependency: 'categoryRegularity'. Either include it or remove the dependency array.",["215"],["212"],["213"],"no-unused-vars","'dataArray' is assigned a value but never used.","Identifier","unusedVar","'setDataArray' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.userInfos.token'. Either include it or remove the dependency array.",["216"],["212"],["213"],"'room' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["217"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["212"],["213"],"React Hook useEffect has missing dependencies: 'props.userFavorites.length', 'props.userInfos.token', 'visibleFavorites', and 'visibleLogin'. Either include them or remove the dependency array. You can also do a functional update 'setVisibleLogin(v => ...)' if you only need 'visibleLogin' in the 'setVisibleLogin' call.",["218"],"'setAvatar' is assigned a value but never used.",["212"],["213"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'styleDefHeart', 'styleFavHeart', and 'team._id'. Either include them or remove the dependency array.",["219"],["220"],"Array.prototype.map() expects a return value from arrow function.","expectedInside",["212"],["213"],"no-global-assign","no-unsafe-negation",{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"231","fix":"233"},"Update the dependencies array to be: [logged, props.userInfos.length]",{"range":"234","text":"235"},"Update the dependencies array to be: [categoryRegularity]",{"range":"236","text":"237"},"Update the dependencies array to be: [props.userInfos.token]",{"range":"238","text":"239"},"Update the dependencies array to be: [props]",{"range":"240","text":"241"},"Update the dependencies array to be: [props.userFavorites.length, props.userInfos.token, visibleFavorites, visibleLogin]",{"range":"242","text":"243"},"Update the dependencies array to be: [props.userFavorites, styleDefHeart, styleFavHeart, team._id]",{"range":"244","text":"245"},{"range":"246","text":"245"},[746,754],"[logged, props.userInfos.length]",[1486,1488],"[categoryRegularity]",[3389,3391],"[props.userInfos.token]",[1785,1787],"[props]",[1041,1043],"[props.userFavorites.length, props.userInfos.token, visibleFavorites, visibleLogin]",[1141,1162],"[props.userFavorites, styleDefHeart, styleFavHeart, team._id]",[999,1020]]